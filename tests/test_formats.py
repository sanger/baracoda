from baracoda.formats import HeronCogUkIdFormatter, GenericBarcodeFormatter


def test_checksum_conversion(heron_formatter):
    assert heron_formatter.checksum("4A99") == "6"
    assert heron_formatter.checksum("102B1") == "B"


def test_checksum_when_sum_mod_16_is_0(heron_formatter):
    assert heron_formatter.checksum("1812") == "0"


def test_checksum_when_sum_mod_16_is_not_0(heron_formatter):
    assert heron_formatter.checksum("1813") == "F"


def test_barcode_example_1(heron_formatter):
    assert heron_formatter.barcode(111111) == "SANG-1B2075"


def test_barcode_example_2():
    formatter = HeronCogUkIdFormatter(prefix="NIRE")
    assert formatter.barcode(111111) == "NIRE-1B2075"


def test_barcode_example_plate_cherrypicked():
    formatter = GenericBarcodeFormatter(prefix="HT")
    assert formatter.barcode(111111) == "HT-111111"


def test_barcode_example_plate_sequencescape():
    formatter = GenericBarcodeFormatter(prefix="SQPD")
    assert formatter.barcode(1) == "SQPD-1"


def barcode_for(barcode: str) -> str:
    """Exract the prefix and checksum from a given barcode then recreates the barcode given the
    number and prefix.

    Arguments:
        barcode {str} -- the barcode to test

    Returns:
        [str] -- barcode generated from given barcode
    """
    prefix, number_and_checksum = barcode.split("-")
    number = number_and_checksum[:-1]
    formatter = HeronCogUkIdFormatter(prefix=prefix)

    return formatter.barcode(int(number, 16))


def test_several_barcodes():
    """Test barcodes generated by CGaP in Java."""
    test_barcodes = [
        "LOND-DE672",
        "LOND-DFFEF",
        "LOND-D54DB",
        "LOND-D7AAA",
        "LOND-E5924",
        "LOND-E4BF2",
        "LOND-E2453",
        "LOND-E4521",
        "LOND-D4D77",
        "LOND-E5D64",
        "LOND-E007F",
        "LOND-DBE6E",
        "LOND-D999C",
        "LOND-D37E3",
        "LOND-E2259",
        "LOND-E458B",
        "LOND-D6504",
        "LOND-E5EE9",
        "LOND-DD28E",
        "LOND-DB47B",
    ]
    obtained_barcodes = []

    for barcode in test_barcodes:
        obtained_barcodes.append(barcode_for(barcode))

    assert obtained_barcodes == test_barcodes
