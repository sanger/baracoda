from baracoda.formats.heron import HeronCogUkIdFormatter
from baracoda.formats.generic import GenericBarcodeFormatter
from baracoda.formats.interfaces import FormatterInterface
from baracoda.exceptions import UnsupportedChildrenCreation, UnsupportedEncodingForPrefix, UnsupportedTextCodeValue
import pytest

from baracoda.formats.sequencescape import Sequencescape22Formatter


def test_checksum_conversion(heron_formatter):
    assert heron_formatter.checksum("4A99") == "6"
    assert heron_formatter.checksum("102B1") == "B"


def test_checksum_when_sum_mod_16_is_0(heron_formatter):
    assert heron_formatter.checksum("1812") == "0"


def test_checksum_when_sum_mod_16_is_not_0(heron_formatter):
    assert heron_formatter.checksum("1813") == "F"


def test_barcode_example_1(heron_formatter):
    assert heron_formatter.barcode(111111) == "SANG-1B2075"


def test_barcode_example_2():
    formatter = HeronCogUkIdFormatter({"prefix": "NIRE"})
    assert formatter.barcode(111111) == "NIRE-1B2075"


def test_barcode_example_plate_cherrypicked():
    formatter = GenericBarcodeFormatter({"prefix": "HT"})
    assert formatter.barcode(111111) == "HT-111111"


def test_barcode_example_plate_sequencescape():
    formatter = GenericBarcodeFormatter({"prefix": "SQPD"})
    assert formatter.barcode(1) == "SQPD-1"


def barcode_for(barcode: str) -> str:
    """Exract the prefix and checksum from a given barcode then recreates the barcode given the
    number and prefix.

    Arguments:
        barcode {str} -- the barcode to test

    Returns:
        [str] -- barcode generated from given barcode
    """
    prefix, number_and_checksum = barcode.split("-")
    number = number_and_checksum[:-1]
    formatter = HeronCogUkIdFormatter({"prefix": prefix})

    return formatter.barcode(int(number, 16))


def test_several_barcodes():
    """Test barcodes generated by CGaP in Java."""
    test_barcodes = [
        "LOND-DE672",
        "LOND-DFFEF",
        "LOND-D54DB",
        "LOND-D7AAA",
        "LOND-E5924",
        "LOND-E4BF2",
        "LOND-E2453",
        "LOND-E4521",
        "LOND-D4D77",
        "LOND-E5D64",
        "LOND-E007F",
        "LOND-DBE6E",
        "LOND-D999C",
        "LOND-D37E3",
        "LOND-E2259",
        "LOND-E458B",
        "LOND-D6504",
        "LOND-E5EE9",
        "LOND-DD28E",
        "LOND-DB47B",
    ]
    obtained_barcodes = []

    for barcode in test_barcodes:
        obtained_barcodes.append(barcode_for(barcode))

    assert obtained_barcodes == test_barcodes


def test_formatter_interface_raises_error_on_child_creation():
    instance = FormatterInterface()
    with pytest.raises(UnsupportedChildrenCreation):
        instance.child_barcode("TEST-123", 444)


def test_generic_formatter_raises_error_on_child_creation():
    instance = GenericBarcodeFormatter({"prefix": "SQPD"})
    with pytest.raises(UnsupportedChildrenCreation):
        instance.child_barcode("TEST-123", 444)


def test_heron_formatter_raises_error_on_child_creation():
    instance = HeronCogUkIdFormatter({"prefix": "SQPD"})
    with pytest.raises(UnsupportedChildrenCreation):
        instance.child_barcode("TEST-123", 444)


def test_sequencescape22_formatter_does_not_raise_error_on_child_creation():
    instance = Sequencescape22Formatter({"prefix": "SQPD"})
    try:
        instance.child_barcode("TEST-123", 444)
    except UnsupportedChildrenCreation as exc:
        assert False, f"'child_barcode raised an exception {exc}"


def test_formatter_breaks_if_not_using_ascii_prefix():
    with pytest.raises(UnsupportedEncodingForPrefix):
        Sequencescape22Formatter({"prefix": "MADRILEÑO"})

    with pytest.raises(UnsupportedEncodingForPrefix):
        GenericBarcodeFormatter({"prefix": "MADRILEÑO"})


def test_sequencescape22_formatter_supports_barcodes_with_suffix():
    instance = Sequencescape22Formatter({"prefix": "TEST"})
    assert instance.barcode(1) == "TEST-1-I"
    assert instance.barcode(2) == "TEST-2-J"

    instance = Sequencescape22Formatter({"prefix": "TT"})
    assert instance.barcode(1) == "TT-1-O"
    assert instance.barcode(2) == "TT-2-P"

    instance = Sequencescape22Formatter({"prefix": "TEST"})
    assert instance.barcode(123) == "TEST-123-V"
    assert instance.barcode(124) == "TEST-124-W"


def test_sequencescape22_formatter_supports_barcodes_with_text_code():
    instance = Sequencescape22Formatter({"prefix": "TEST", "text": "EDU"})
    assert instance.barcode(1) == "TEST-EDU-1-P"
    assert instance.barcode(2) == "TEST-EDU-2-Q"

    instance = Sequencescape22Formatter({"prefix": "TT", "text": "T01"})
    assert instance.barcode(1) == "TT-T01-1-N"
    assert instance.barcode(2) == "TT-T01-2-O"

    instance = Sequencescape22Formatter({"prefix": "TEST", "text": "T24"})
    assert instance.barcode(123) == "TEST-T24-123-D"
    assert instance.barcode(124) == "TEST-T24-124-E"


def test_sequencescape22_formatter_supports_barcodes_with_wrong_text_code():
    with pytest.raises(UnsupportedTextCodeValue):
        Sequencescape22Formatter({"prefix": "TEST", "text": "T240"})


def test_sequencescape22_formatter_supports_children_barcodes_with_suffix():
    instance = Sequencescape22Formatter({"prefix": "TEST"})
    assert instance.child_barcode("TEST-1", 1) == "TEST-1-1-J"
    assert instance.child_barcode("TEST-1", 2) == "TEST-1-2-K"
    assert instance.child_barcode("TEST-2", 1) == "TEST-2-1-M"
    assert instance.child_barcode("TEST-2", 2) == "TEST-2-2-N"
    assert instance.child_barcode("TT-1", 1) == "TT-1-1-K"
    assert instance.child_barcode("TT-1", 2) == "TT-1-2-L"
    assert instance.child_barcode("TT-2", 1) == "TT-2-1-N"
    assert instance.child_barcode("TT-2", 2) == "TT-2-2-O"

    assert instance.child_barcode("TEST-123", 444) == "TEST-123-444-U"
    assert instance.child_barcode("TEST-123", 445) == "TEST-123-445-V"
    assert instance.child_barcode("TEST-124", 444) == "TEST-124-444-C"
    assert instance.child_barcode("TEST-124", 445) == "TEST-124-445-D"
